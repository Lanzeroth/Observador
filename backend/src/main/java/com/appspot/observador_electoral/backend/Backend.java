/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://code.google.com/p/google-apis-client-generator/
 * (build: 2015-03-26 20:30:19 UTC)
 * on 2015-06-05 at 18:13:21 UTC 
 * Modify at your own risk.
 */

package com.appspot.observador_electoral.backend;

/**
 * Service definition for Backend (v1).
 * <p/>
 * <p>
 * Observador Electoral Backend Services
 * </p>
 * <p/>
 * <p>
 * For more information about this service, see the
 * <a href="" target="_blank">API Documentation</a>
 * </p>
 * <p/>
 * <p>
 * This service uses {@link BackendRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @author Google, Inc.
 * @since 1.3
 */
@SuppressWarnings("javadoc")
public class Backend extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

    // Note: Leave this static initializer at the top of the file.
    static {
        com.google.api.client.util.Preconditions.checkState(
                com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
                        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
                "You are currently running with version %s of google-api-client. " +
                        "You need at least version 1.15 of google-api-client to run version " +
                        "1.20.0 of the backend library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
    }

    /**
     * The default encoded root URL of the service. This is determined when the library is generated
     * and normally should not be changed.
     *
     * @since 1.7
     */
    public static final String DEFAULT_ROOT_URL = "https://observador-electoral.appspot.com/_ah/api/";

    /**
     * The default encoded service path of the service. This is determined when the library is
     * generated and normally should not be changed.
     *
     * @since 1.7
     */
    public static final String DEFAULT_SERVICE_PATH = "backend/v1/";

    /**
     * The default encoded base URL of the service. This is determined when the library is generated
     * and normally should not be changed.
     */
    public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

    /**
     * Constructor.
     * <p/>
     * <p>
     * Use {@link Builder} if you need to specify any of the optional parameters.
     * </p>
     *
     * @param transport              HTTP transport, which should normally be:
     *                               <ul>
     *                               <li>Google App Engine:
     *                               {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *                               <li>Android: {@code newCompatibleTransport} from
     *                               {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *                               <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *                               </li>
     *                               </ul>
     * @param jsonFactory            JSON factory, which may be:
     *                               <ul>
     *                               <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *                               <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *                               <li>Android Honeycomb or higher:
     *                               {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *                               </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Backend(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
                   com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
        this(new Builder(transport, jsonFactory, httpRequestInitializer));
    }

    /**
     * @param builder builder
     */
    Backend(Builder builder) {
        super(builder);
    }

    @Override
    protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
        super.initialize(httpClientRequest);
    }

    /**
     * An accessor for creating requests from the Casilla collection.
     * <p/>
     * <p>The typical use is:</p>
     * <pre>
     *   {@code Backend backend = new Backend(...);}
     *   {@code Backend.Casilla.List request = backend.casilla().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Casilla casilla() {
        return new Casilla();
    }

    /**
     * The "casilla" collection of methods.
     */
    public class Casilla {

        /**
         * Assigns a casilla to a observador
         * <p/>
         * Create a request for the method "casilla.assign".
         * <p/>
         * This request holds the parameters needed by the backend server.  After setting any optional
         * parameters, call the {@link Assign#execute()} method to invoke the remote operation.
         *
         * @param content the {@link com.appspot.observador_electoral.backend.model.MessagesAssignCasillaToObservador}
         * @return the request
         */
        public Assign assign(com.appspot.observador_electoral.backend.model.MessagesAssignCasillaToObservador content) throws java.io.IOException {
            Assign result = new Assign(content);
            initialize(result);
            return result;
        }

        public class Assign extends BackendRequest<com.appspot.observador_electoral.backend.model.MessagesAssignCasillaToObservadorResponse> {

            private static final String REST_PATH = "casilla/assign";

            /**
             * Assigns a casilla to a observador
             * <p/>
             * Create a request for the method "casilla.assign".
             * <p/>
             * This request holds the parameters needed by the the backend server.  After setting any optional
             * parameters, call the {@link Assign#execute()} method to invoke the remote operation. <p> {@link
             * Assign#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param content the {@link com.appspot.observador_electoral.backend.model.MessagesAssignCasillaToObservador}
             * @since 1.13
             */
            protected Assign(com.appspot.observador_electoral.backend.model.MessagesAssignCasillaToObservador content) {
                super(Backend.this, "POST", REST_PATH, content, com.appspot.observador_electoral.backend.model.MessagesAssignCasillaToObservadorResponse.class);
            }

            @Override
            public Assign setAlt(java.lang.String alt) {
                return (Assign) super.setAlt(alt);
            }

            @Override
            public Assign setFields(java.lang.String fields) {
                return (Assign) super.setFields(fields);
            }

            @Override
            public Assign setKey(java.lang.String key) {
                return (Assign) super.setKey(key);
            }

            @Override
            public Assign setOauthToken(java.lang.String oauthToken) {
                return (Assign) super.setOauthToken(oauthToken);
            }

            @Override
            public Assign setPrettyPrint(java.lang.Boolean prettyPrint) {
                return (Assign) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Assign setQuotaUser(java.lang.String quotaUser) {
                return (Assign) super.setQuotaUser(quotaUser);
            }

            @Override
            public Assign setUserIp(java.lang.String userIp) {
                return (Assign) super.setUserIp(userIp);
            }

            @Override
            public Assign set(String parameterName, Object value) {
                return (Assign) super.set(parameterName, value);
            }
        }

        /**
         * Generates a new casilla in the platform.
         * <p/>
         * Create a request for the method "casilla.create".
         * <p/>
         * This request holds the parameters needed by the backend server.  After setting any optional
         * parameters, call the {@link Create#execute()} method to invoke the remote operation.
         *
         * @param content the {@link com.appspot.observador_electoral.backend.model.MessagesCreateCasilla}
         * @return the request
         */
        public Create create(com.appspot.observador_electoral.backend.model.MessagesCreateCasilla content) throws java.io.IOException {
            Create result = new Create(content);
            initialize(result);
            return result;
        }

        public class Create extends BackendRequest<com.appspot.observador_electoral.backend.model.MessagesCreateCasillaResponse> {

            private static final String REST_PATH = "casilla/create";

            /**
             * Generates a new casilla in the platform.
             * <p/>
             * Create a request for the method "casilla.create".
             * <p/>
             * This request holds the parameters needed by the the backend server.  After setting any optional
             * parameters, call the {@link Create#execute()} method to invoke the remote operation. <p> {@link
             * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param content the {@link com.appspot.observador_electoral.backend.model.MessagesCreateCasilla}
             * @since 1.13
             */
            protected Create(com.appspot.observador_electoral.backend.model.MessagesCreateCasilla content) {
                super(Backend.this, "POST", REST_PATH, content, com.appspot.observador_electoral.backend.model.MessagesCreateCasillaResponse.class);
            }

            @Override
            public Create setAlt(java.lang.String alt) {
                return (Create) super.setAlt(alt);
            }

            @Override
            public Create setFields(java.lang.String fields) {
                return (Create) super.setFields(fields);
            }

            @Override
            public Create setKey(java.lang.String key) {
                return (Create) super.setKey(key);
            }

            @Override
            public Create setOauthToken(java.lang.String oauthToken) {
                return (Create) super.setOauthToken(oauthToken);
            }

            @Override
            public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
                return (Create) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Create setQuotaUser(java.lang.String quotaUser) {
                return (Create) super.setQuotaUser(quotaUser);
            }

            @Override
            public Create setUserIp(java.lang.String userIp) {
                return (Create) super.setUserIp(userIp);
            }

            @Override
            public Create set(String parameterName, Object value) {
                return (Create) super.set(parameterName, value);
            }
        }

        /**
         * Gets the details of a given casilla national_id.
         * <p/>
         * Create a request for the method "casilla.get".
         * <p/>
         * This request holds the parameters needed by the backend server.  After setting any optional
         * parameters, call the {@link Get#execute()} method to invoke the remote operation.
         *
         * @param content the {@link com.appspot.observador_electoral.backend.model.MessagesGetCasillaDetail}
         * @return the request
         */
        public Get get(com.appspot.observador_electoral.backend.model.MessagesGetCasillaDetail content) throws java.io.IOException {
            Get result = new Get(content);
            initialize(result);
            return result;
        }

        public class Get extends BackendRequest<com.appspot.observador_electoral.backend.model.MessagesGetCasillaDetailResponse> {

            private static final String REST_PATH = "casilla/get";

            /**
             * Gets the details of a given casilla national_id.
             * <p/>
             * Create a request for the method "casilla.get".
             * <p/>
             * This request holds the parameters needed by the the backend server.  After setting any optional
             * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
             * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
             * called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param content the {@link com.appspot.observador_electoral.backend.model.MessagesGetCasillaDetail}
             * @since 1.13
             */
            protected Get(com.appspot.observador_electoral.backend.model.MessagesGetCasillaDetail content) {
                super(Backend.this, "POST", REST_PATH, content, com.appspot.observador_electoral.backend.model.MessagesGetCasillaDetailResponse.class);
            }

            @Override
            public Get setAlt(java.lang.String alt) {
                return (Get) super.setAlt(alt);
            }

            @Override
            public Get setFields(java.lang.String fields) {
                return (Get) super.setFields(fields);
            }

            @Override
            public Get setKey(java.lang.String key) {
                return (Get) super.setKey(key);
            }

            @Override
            public Get setOauthToken(java.lang.String oauthToken) {
                return (Get) super.setOauthToken(oauthToken);
            }

            @Override
            public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
                return (Get) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Get setQuotaUser(java.lang.String quotaUser) {
                return (Get) super.setQuotaUser(quotaUser);
            }

            @Override
            public Get setUserIp(java.lang.String userIp) {
                return (Get) super.setUserIp(userIp);
            }

            @Override
            public Get set(String parameterName, Object value) {
                return (Get) super.set(parameterName, value);
            }
        }

        /**
         * Gets all the Casillas assigned to a given Observador.
         * <p/>
         * Create a request for the method "casilla.get_assigned_to_observador".
         * <p/>
         * This request holds the parameters needed by the backend server.  After setting any optional
         * parameters, call the {@link GetAssignedToObservador#execute()} method to invoke the remote
         * operation.
         *
         * @param content the {@link com.appspot.observador_electoral.backend.model.MessagesGetCasillasAssignedToObservador}
         * @return the request
         */
        public GetAssignedToObservador getAssignedToObservador(com.appspot.observador_electoral.backend.model.MessagesGetCasillasAssignedToObservador content) throws java.io.IOException {
            GetAssignedToObservador result = new GetAssignedToObservador(content);
            initialize(result);
            return result;
        }

        public class GetAssignedToObservador extends BackendRequest<com.appspot.observador_electoral.backend.model.MessagesGetCasillasAssignedToObservadorResponse> {

            private static final String REST_PATH = "casilla/get_assigned_to_observador";

            /**
             * Gets all the Casillas assigned to a given Observador.
             * <p/>
             * Create a request for the method "casilla.get_assigned_to_observador".
             * <p/>
             * This request holds the parameters needed by the the backend server.  After setting any optional
             * parameters, call the {@link GetAssignedToObservador#execute()} method to invoke the remote
             * operation. <p> {@link GetAssignedToObservador#initialize(com.google.api.client.googleapis.servi
             * ces.AbstractGoogleClientRequest)} must be called to initialize this instance immediately after
             * invoking the constructor. </p>
             *
             * @param content the {@link com.appspot.observador_electoral.backend.model.MessagesGetCasillasAssignedToObservador}
             * @since 1.13
             */
            protected GetAssignedToObservador(com.appspot.observador_electoral.backend.model.MessagesGetCasillasAssignedToObservador content) {
                super(Backend.this, "POST", REST_PATH, content, com.appspot.observador_electoral.backend.model.MessagesGetCasillasAssignedToObservadorResponse.class);
            }

            @Override
            public GetAssignedToObservador setAlt(java.lang.String alt) {
                return (GetAssignedToObservador) super.setAlt(alt);
            }

            @Override
            public GetAssignedToObservador setFields(java.lang.String fields) {
                return (GetAssignedToObservador) super.setFields(fields);
            }

            @Override
            public GetAssignedToObservador setKey(java.lang.String key) {
                return (GetAssignedToObservador) super.setKey(key);
            }

            @Override
            public GetAssignedToObservador setOauthToken(java.lang.String oauthToken) {
                return (GetAssignedToObservador) super.setOauthToken(oauthToken);
            }

            @Override
            public GetAssignedToObservador setPrettyPrint(java.lang.Boolean prettyPrint) {
                return (GetAssignedToObservador) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public GetAssignedToObservador setQuotaUser(java.lang.String quotaUser) {
                return (GetAssignedToObservador) super.setQuotaUser(quotaUser);
            }

            @Override
            public GetAssignedToObservador setUserIp(java.lang.String userIp) {
                return (GetAssignedToObservador) super.setUserIp(userIp);
            }

            @Override
            public GetAssignedToObservador set(String parameterName, Object value) {
                return (GetAssignedToObservador) super.set(parameterName, value);
            }
        }

    }

    /**
     * An accessor for creating requests from the Clasificacion collection.
     * <p/>
     * <p>The typical use is:</p>
     * <pre>
     *   {@code Backend backend = new Backend(...);}
     *   {@code Backend.Clasificacion.List request = backend.clasificacion().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Clasificacion clasificacion() {
        return new Clasificacion();
    }

    /**
     * The "clasificacion" collection of methods.
     */
    public class Clasificacion {

        /**
         * Generates a new clasificacion in the platform.
         * <p/>
         * Create a request for the method "clasificacion.create".
         * <p/>
         * This request holds the parameters needed by the backend server.  After setting any optional
         * parameters, call the {@link Create#execute()} method to invoke the remote operation.
         *
         * @param content the {@link com.appspot.observador_electoral.backend.model.MessagesCreateClasificacion}
         * @return the request
         */
        public Create create(com.appspot.observador_electoral.backend.model.MessagesCreateClasificacion content) throws java.io.IOException {
            Create result = new Create(content);
            initialize(result);
            return result;
        }

        public class Create extends BackendRequest<com.appspot.observador_electoral.backend.model.MessagesCreateClasificacionResponse> {

            private static final String REST_PATH = "clasificacion/create";

            /**
             * Generates a new clasificacion in the platform.
             * <p/>
             * Create a request for the method "clasificacion.create".
             * <p/>
             * This request holds the parameters needed by the the backend server.  After setting any optional
             * parameters, call the {@link Create#execute()} method to invoke the remote operation. <p> {@link
             * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param content the {@link com.appspot.observador_electoral.backend.model.MessagesCreateClasificacion}
             * @since 1.13
             */
            protected Create(com.appspot.observador_electoral.backend.model.MessagesCreateClasificacion content) {
                super(Backend.this, "POST", REST_PATH, content, com.appspot.observador_electoral.backend.model.MessagesCreateClasificacionResponse.class);
            }

            @Override
            public Create setAlt(java.lang.String alt) {
                return (Create) super.setAlt(alt);
            }

            @Override
            public Create setFields(java.lang.String fields) {
                return (Create) super.setFields(fields);
            }

            @Override
            public Create setKey(java.lang.String key) {
                return (Create) super.setKey(key);
            }

            @Override
            public Create setOauthToken(java.lang.String oauthToken) {
                return (Create) super.setOauthToken(oauthToken);
            }

            @Override
            public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
                return (Create) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Create setQuotaUser(java.lang.String quotaUser) {
                return (Create) super.setQuotaUser(quotaUser);
            }

            @Override
            public Create setUserIp(java.lang.String userIp) {
                return (Create) super.setUserIp(userIp);
            }

            @Override
            public Create set(String parameterName, Object value) {
                return (Create) super.set(parameterName, value);
            }
        }

        /**
         * Gets all clasificaciones.
         * <p/>
         * Create a request for the method "clasificacion.get_all".
         * <p/>
         * This request holds the parameters needed by the backend server.  After setting any optional
         * parameters, call the {@link GetAll#execute()} method to invoke the remote operation.
         *
         * @param content the {@link com.appspot.observador_electoral.backend.model.MessagesGetAllClasificaciones}
         * @return the request
         */
        public GetAll getAll(com.appspot.observador_electoral.backend.model.MessagesGetAllClasificaciones content) throws java.io.IOException {
            GetAll result = new GetAll(content);
            initialize(result);
            return result;
        }

        public class GetAll extends BackendRequest<com.appspot.observador_electoral.backend.model.MessagesGetAllClasificacionesResponse> {

            private static final String REST_PATH = "clasificacion/get_all";

            /**
             * Gets all clasificaciones.
             * <p/>
             * Create a request for the method "clasificacion.get_all".
             * <p/>
             * This request holds the parameters needed by the the backend server.  After setting any optional
             * parameters, call the {@link GetAll#execute()} method to invoke the remote operation. <p> {@link
             * GetAll#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param content the {@link com.appspot.observador_electoral.backend.model.MessagesGetAllClasificaciones}
             * @since 1.13
             */
            protected GetAll(com.appspot.observador_electoral.backend.model.MessagesGetAllClasificaciones content) {
                super(Backend.this, "POST", REST_PATH, content, com.appspot.observador_electoral.backend.model.MessagesGetAllClasificacionesResponse.class);
            }

            @Override
            public GetAll setAlt(java.lang.String alt) {
                return (GetAll) super.setAlt(alt);
            }

            @Override
            public GetAll setFields(java.lang.String fields) {
                return (GetAll) super.setFields(fields);
            }

            @Override
            public GetAll setKey(java.lang.String key) {
                return (GetAll) super.setKey(key);
            }

            @Override
            public GetAll setOauthToken(java.lang.String oauthToken) {
                return (GetAll) super.setOauthToken(oauthToken);
            }

            @Override
            public GetAll setPrettyPrint(java.lang.Boolean prettyPrint) {
                return (GetAll) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public GetAll setQuotaUser(java.lang.String quotaUser) {
                return (GetAll) super.setQuotaUser(quotaUser);
            }

            @Override
            public GetAll setUserIp(java.lang.String userIp) {
                return (GetAll) super.setUserIp(userIp);
            }

            @Override
            public GetAll set(String parameterName, Object value) {
                return (GetAll) super.set(parameterName, value);
            }
        }

        /**
         * Gets all the available clasificaciones for a given Casilla.
         * <p/>
         * Create a request for the method "clasificacion.get_available".
         * <p/>
         * This request holds the parameters needed by the backend server.  After setting any optional
         * parameters, call the {@link GetAvailable#execute()} method to invoke the remote operation.
         *
         * @param content the {@link com.appspot.observador_electoral.backend.model.MessagesGetAvailableClasificaciones}
         * @return the request
         */
        public GetAvailable getAvailable(com.appspot.observador_electoral.backend.model.MessagesGetAvailableClasificaciones content) throws java.io.IOException {
            GetAvailable result = new GetAvailable(content);
            initialize(result);
            return result;
        }

        public class GetAvailable extends BackendRequest<com.appspot.observador_electoral.backend.model.MessagesGetAvailableClasificacionesResponse> {

            private static final String REST_PATH = "clasificacion/get_available";

            /**
             * Gets all the available clasificaciones for a given Casilla.
             * <p/>
             * Create a request for the method "clasificacion.get_available".
             * <p/>
             * This request holds the parameters needed by the the backend server.  After setting any optional
             * parameters, call the {@link GetAvailable#execute()} method to invoke the remote operation. <p>
             * {@link
             * GetAvailable#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
             * must be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param content the {@link com.appspot.observador_electoral.backend.model.MessagesGetAvailableClasificaciones}
             * @since 1.13
             */
            protected GetAvailable(com.appspot.observador_electoral.backend.model.MessagesGetAvailableClasificaciones content) {
                super(Backend.this, "POST", REST_PATH, content, com.appspot.observador_electoral.backend.model.MessagesGetAvailableClasificacionesResponse.class);
            }

            @Override
            public GetAvailable setAlt(java.lang.String alt) {
                return (GetAvailable) super.setAlt(alt);
            }

            @Override
            public GetAvailable setFields(java.lang.String fields) {
                return (GetAvailable) super.setFields(fields);
            }

            @Override
            public GetAvailable setKey(java.lang.String key) {
                return (GetAvailable) super.setKey(key);
            }

            @Override
            public GetAvailable setOauthToken(java.lang.String oauthToken) {
                return (GetAvailable) super.setOauthToken(oauthToken);
            }

            @Override
            public GetAvailable setPrettyPrint(java.lang.Boolean prettyPrint) {
                return (GetAvailable) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public GetAvailable setQuotaUser(java.lang.String quotaUser) {
                return (GetAvailable) super.setQuotaUser(quotaUser);
            }

            @Override
            public GetAvailable setUserIp(java.lang.String userIp) {
                return (GetAvailable) super.setUserIp(userIp);
            }

            @Override
            public GetAvailable set(String parameterName, Object value) {
                return (GetAvailable) super.set(parameterName, value);
            }
        }

        /**
         * Gets the details of a given clasificacion.
         * <p/>
         * Create a request for the method "clasificacion.get_detail".
         * <p/>
         * This request holds the parameters needed by the backend server.  After setting any optional
         * parameters, call the {@link GetDetail#execute()} method to invoke the remote operation.
         *
         * @param content the {@link com.appspot.observador_electoral.backend.model.MessagesGetClasificacionDetails}
         * @return the request
         */
        public GetDetail getDetail(com.appspot.observador_electoral.backend.model.MessagesGetClasificacionDetails content) throws java.io.IOException {
            GetDetail result = new GetDetail(content);
            initialize(result);
            return result;
        }

        public class GetDetail extends BackendRequest<com.appspot.observador_electoral.backend.model.MessagesGetClasificacionDetailsResponse> {

            private static final String REST_PATH = "clasificacion/get_detail";

            /**
             * Gets the details of a given clasificacion.
             * <p/>
             * Create a request for the method "clasificacion.get_detail".
             * <p/>
             * This request holds the parameters needed by the the backend server.  After setting any optional
             * parameters, call the {@link GetDetail#execute()} method to invoke the remote operation. <p>
             * {@link
             * GetDetail#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
             * must be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param content the {@link com.appspot.observador_electoral.backend.model.MessagesGetClasificacionDetails}
             * @since 1.13
             */
            protected GetDetail(com.appspot.observador_electoral.backend.model.MessagesGetClasificacionDetails content) {
                super(Backend.this, "POST", REST_PATH, content, com.appspot.observador_electoral.backend.model.MessagesGetClasificacionDetailsResponse.class);
            }

            @Override
            public GetDetail setAlt(java.lang.String alt) {
                return (GetDetail) super.setAlt(alt);
            }

            @Override
            public GetDetail setFields(java.lang.String fields) {
                return (GetDetail) super.setFields(fields);
            }

            @Override
            public GetDetail setKey(java.lang.String key) {
                return (GetDetail) super.setKey(key);
            }

            @Override
            public GetDetail setOauthToken(java.lang.String oauthToken) {
                return (GetDetail) super.setOauthToken(oauthToken);
            }

            @Override
            public GetDetail setPrettyPrint(java.lang.Boolean prettyPrint) {
                return (GetDetail) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public GetDetail setQuotaUser(java.lang.String quotaUser) {
                return (GetDetail) super.setQuotaUser(quotaUser);
            }

            @Override
            public GetDetail setUserIp(java.lang.String userIp) {
                return (GetDetail) super.setUserIp(userIp);
            }

            @Override
            public GetDetail set(String parameterName, Object value) {
                return (GetDetail) super.set(parameterName, value);
            }
        }

    }

    /**
     * An accessor for creating requests from the Distrito collection.
     * <p/>
     * <p>The typical use is:</p>
     * <pre>
     *   {@code Backend backend = new Backend(...);}
     *   {@code Backend.Distrito.List request = backend.distrito().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Distrito distrito() {
        return new Distrito();
    }

    /**
     * The "distrito" collection of methods.
     */
    public class Distrito {

        /**
         * Generates a new distrito in the platform.
         * <p/>
         * Create a request for the method "distrito.create".
         * <p/>
         * This request holds the parameters needed by the backend server.  After setting any optional
         * parameters, call the {@link Create#execute()} method to invoke the remote operation.
         *
         * @param content the {@link com.appspot.observador_electoral.backend.model.MessagesCreateDistrito}
         * @return the request
         */
        public Create create(com.appspot.observador_electoral.backend.model.MessagesCreateDistrito content) throws java.io.IOException {
            Create result = new Create(content);
            initialize(result);
            return result;
        }

        public class Create extends BackendRequest<com.appspot.observador_electoral.backend.model.MessagesCreateDistritoResponse> {

            private static final String REST_PATH = "distrito/create";

            /**
             * Generates a new distrito in the platform.
             * <p/>
             * Create a request for the method "distrito.create".
             * <p/>
             * This request holds the parameters needed by the the backend server.  After setting any optional
             * parameters, call the {@link Create#execute()} method to invoke the remote operation. <p> {@link
             * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param content the {@link com.appspot.observador_electoral.backend.model.MessagesCreateDistrito}
             * @since 1.13
             */
            protected Create(com.appspot.observador_electoral.backend.model.MessagesCreateDistrito content) {
                super(Backend.this, "POST", REST_PATH, content, com.appspot.observador_electoral.backend.model.MessagesCreateDistritoResponse.class);
            }

            @Override
            public Create setAlt(java.lang.String alt) {
                return (Create) super.setAlt(alt);
            }

            @Override
            public Create setFields(java.lang.String fields) {
                return (Create) super.setFields(fields);
            }

            @Override
            public Create setKey(java.lang.String key) {
                return (Create) super.setKey(key);
            }

            @Override
            public Create setOauthToken(java.lang.String oauthToken) {
                return (Create) super.setOauthToken(oauthToken);
            }

            @Override
            public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
                return (Create) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Create setQuotaUser(java.lang.String quotaUser) {
                return (Create) super.setQuotaUser(quotaUser);
            }

            @Override
            public Create setUserIp(java.lang.String userIp) {
                return (Create) super.setUserIp(userIp);
            }

            @Override
            public Create set(String parameterName, Object value) {
                return (Create) super.set(parameterName, value);
            }
        }

    }

    /**
     * An accessor for creating requests from the Location collection.
     * <p/>
     * <p>The typical use is:</p>
     * <pre>
     *   {@code Backend backend = new Backend(...);}
     *   {@code Backend.Location.List request = backend.location().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Location location() {
        return new Location();
    }

    /**
     * The "location" collection of methods.
     */
    public class Location {

        /**
         * Generates a new location in the platform.
         * <p/>
         * Create a request for the method "location.create".
         * <p/>
         * This request holds the parameters needed by the backend server.  After setting any optional
         * parameters, call the {@link Create#execute()} method to invoke the remote operation.
         *
         * @param content the {@link com.appspot.observador_electoral.backend.model.MessagesCreateLocation}
         * @return the request
         */
        public Create create(com.appspot.observador_electoral.backend.model.MessagesCreateLocation content) throws java.io.IOException {
            Create result = new Create(content);
            initialize(result);
            return result;
        }

        public class Create extends BackendRequest<com.appspot.observador_electoral.backend.model.MessagesCreateLocationResponse> {

            private static final String REST_PATH = "location/create";

            /**
             * Generates a new location in the platform.
             * <p/>
             * Create a request for the method "location.create".
             * <p/>
             * This request holds the parameters needed by the the backend server.  After setting any optional
             * parameters, call the {@link Create#execute()} method to invoke the remote operation. <p> {@link
             * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param content the {@link com.appspot.observador_electoral.backend.model.MessagesCreateLocation}
             * @since 1.13
             */
            protected Create(com.appspot.observador_electoral.backend.model.MessagesCreateLocation content) {
                super(Backend.this, "POST", REST_PATH, content, com.appspot.observador_electoral.backend.model.MessagesCreateLocationResponse.class);
            }

            @Override
            public Create setAlt(java.lang.String alt) {
                return (Create) super.setAlt(alt);
            }

            @Override
            public Create setFields(java.lang.String fields) {
                return (Create) super.setFields(fields);
            }

            @Override
            public Create setKey(java.lang.String key) {
                return (Create) super.setKey(key);
            }

            @Override
            public Create setOauthToken(java.lang.String oauthToken) {
                return (Create) super.setOauthToken(oauthToken);
            }

            @Override
            public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
                return (Create) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Create setQuotaUser(java.lang.String quotaUser) {
                return (Create) super.setQuotaUser(quotaUser);
            }

            @Override
            public Create setUserIp(java.lang.String userIp) {
                return (Create) super.setUserIp(userIp);
            }

            @Override
            public Create set(String parameterName, Object value) {
                return (Create) super.set(parameterName, value);
            }
        }

    }

    /**
     * An accessor for creating requests from the Media collection.
     * <p/>
     * <p>The typical use is:</p>
     * <pre>
     *   {@code Backend backend = new Backend(...);}
     *   {@code Backend.Media.List request = backend.media().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Media media() {
        return new Media();
    }

    /**
     * The "media" collection of methods.
     */
    public class Media {

        /**
         * Generates a new media in the platform.
         * <p/>
         * Create a request for the method "media.create".
         * <p/>
         * This request holds the parameters needed by the backend server.  After setting any optional
         * parameters, call the {@link Create#execute()} method to invoke the remote operation.
         *
         * @param content the {@link com.appspot.observador_electoral.backend.model.MessagesCreateMedia}
         * @return the request
         */
        public Create create(com.appspot.observador_electoral.backend.model.MessagesCreateMedia content) throws java.io.IOException {
            Create result = new Create(content);
            initialize(result);
            return result;
        }

        public class Create extends BackendRequest<com.appspot.observador_electoral.backend.model.MessagesCreateMediaResponse> {

            private static final String REST_PATH = "media/create";

            /**
             * Generates a new media in the platform.
             * <p/>
             * Create a request for the method "media.create".
             * <p/>
             * This request holds the parameters needed by the the backend server.  After setting any optional
             * parameters, call the {@link Create#execute()} method to invoke the remote operation. <p> {@link
             * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param content the {@link com.appspot.observador_electoral.backend.model.MessagesCreateMedia}
             * @since 1.13
             */
            protected Create(com.appspot.observador_electoral.backend.model.MessagesCreateMedia content) {
                super(Backend.this, "POST", REST_PATH, content, com.appspot.observador_electoral.backend.model.MessagesCreateMediaResponse.class);
            }

            @Override
            public Create setAlt(java.lang.String alt) {
                return (Create) super.setAlt(alt);
            }

            @Override
            public Create setFields(java.lang.String fields) {
                return (Create) super.setFields(fields);
            }

            @Override
            public Create setKey(java.lang.String key) {
                return (Create) super.setKey(key);
            }

            @Override
            public Create setOauthToken(java.lang.String oauthToken) {
                return (Create) super.setOauthToken(oauthToken);
            }

            @Override
            public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
                return (Create) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Create setQuotaUser(java.lang.String quotaUser) {
                return (Create) super.setQuotaUser(quotaUser);
            }

            @Override
            public Create setUserIp(java.lang.String userIp) {
                return (Create) super.setUserIp(userIp);
            }

            @Override
            public Create set(String parameterName, Object value) {
                return (Create) super.set(parameterName, value);
            }
        }

    }

    /**
     * An accessor for creating requests from the Nota collection.
     * <p/>
     * <p>The typical use is:</p>
     * <pre>
     *   {@code Backend backend = new Backend(...);}
     *   {@code Backend.Nota.List request = backend.nota().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Nota nota() {
        return new Nota();
    }

    /**
     * The "nota" collection of methods.
     */
    public class Nota {

        /**
         * Generates a new nota in the platform.
         * <p/>
         * Create a request for the method "nota.create".
         * <p/>
         * This request holds the parameters needed by the backend server.  After setting any optional
         * parameters, call the {@link Create#execute()} method to invoke the remote operation.
         *
         * @param content the {@link com.appspot.observador_electoral.backend.model.MessagesCreateNota}
         * @return the request
         */
        public Create create(com.appspot.observador_electoral.backend.model.MessagesCreateNota content) throws java.io.IOException {
            Create result = new Create(content);
            initialize(result);
            return result;
        }

        public class Create extends BackendRequest<com.appspot.observador_electoral.backend.model.MessagesCreateNotaResponse> {

            private static final String REST_PATH = "nota/create";

            /**
             * Generates a new nota in the platform.
             * <p/>
             * Create a request for the method "nota.create".
             * <p/>
             * This request holds the parameters needed by the the backend server.  After setting any optional
             * parameters, call the {@link Create#execute()} method to invoke the remote operation. <p> {@link
             * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param content the {@link com.appspot.observador_electoral.backend.model.MessagesCreateNota}
             * @since 1.13
             */
            protected Create(com.appspot.observador_electoral.backend.model.MessagesCreateNota content) {
                super(Backend.this, "POST", REST_PATH, content, com.appspot.observador_electoral.backend.model.MessagesCreateNotaResponse.class);
            }

            @Override
            public Create setAlt(java.lang.String alt) {
                return (Create) super.setAlt(alt);
            }

            @Override
            public Create setFields(java.lang.String fields) {
                return (Create) super.setFields(fields);
            }

            @Override
            public Create setKey(java.lang.String key) {
                return (Create) super.setKey(key);
            }

            @Override
            public Create setOauthToken(java.lang.String oauthToken) {
                return (Create) super.setOauthToken(oauthToken);
            }

            @Override
            public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
                return (Create) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Create setQuotaUser(java.lang.String quotaUser) {
                return (Create) super.setQuotaUser(quotaUser);
            }

            @Override
            public Create setUserIp(java.lang.String userIp) {
                return (Create) super.setUserIp(userIp);
            }

            @Override
            public Create set(String parameterName, Object value) {
                return (Create) super.set(parameterName, value);
            }
        }

    }

    /**
     * An accessor for creating requests from the Observacion collection.
     * <p/>
     * <p>The typical use is:</p>
     * <pre>
     *   {@code Backend backend = new Backend(...);}
     *   {@code Backend.Observacion.List request = backend.observacion().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Observacion observacion() {
        return new Observacion();
    }

    /**
     * The "observacion" collection of methods.
     */
    public class Observacion {

        /**
         * Generates a new observacion in the platform.
         * <p/>
         * Create a request for the method "observacion.create".
         * <p/>
         * This request holds the parameters needed by the backend server.  After setting any optional
         * parameters, call the {@link Create#execute()} method to invoke the remote operation.
         *
         * @param content the {@link com.appspot.observador_electoral.backend.model.MessagesCreateObservacion}
         * @return the request
         */
        public Create create(com.appspot.observador_electoral.backend.model.MessagesCreateObservacion content) throws java.io.IOException {
            Create result = new Create(content);
            initialize(result);
            return result;
        }

        public class Create extends BackendRequest<com.appspot.observador_electoral.backend.model.MessagesCreateObservacionResponse> {

            private static final String REST_PATH = "observacion/create";

            /**
             * Generates a new observacion in the platform.
             * <p/>
             * Create a request for the method "observacion.create".
             * <p/>
             * This request holds the parameters needed by the the backend server.  After setting any optional
             * parameters, call the {@link Create#execute()} method to invoke the remote operation. <p> {@link
             * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param content the {@link com.appspot.observador_electoral.backend.model.MessagesCreateObservacion}
             * @since 1.13
             */
            protected Create(com.appspot.observador_electoral.backend.model.MessagesCreateObservacion content) {
                super(Backend.this, "POST", REST_PATH, content, com.appspot.observador_electoral.backend.model.MessagesCreateObservacionResponse.class);
            }

            @Override
            public Create setAlt(java.lang.String alt) {
                return (Create) super.setAlt(alt);
            }

            @Override
            public Create setFields(java.lang.String fields) {
                return (Create) super.setFields(fields);
            }

            @Override
            public Create setKey(java.lang.String key) {
                return (Create) super.setKey(key);
            }

            @Override
            public Create setOauthToken(java.lang.String oauthToken) {
                return (Create) super.setOauthToken(oauthToken);
            }

            @Override
            public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
                return (Create) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Create setQuotaUser(java.lang.String quotaUser) {
                return (Create) super.setQuotaUser(quotaUser);
            }

            @Override
            public Create setUserIp(java.lang.String userIp) {
                return (Create) super.setUserIp(userIp);
            }

            @Override
            public Create set(String parameterName, Object value) {
                return (Create) super.set(parameterName, value);
            }
        }

        /**
         * Get the total number of observaciones
         * <p/>
         * Create a request for the method "observacion.get_number".
         * <p/>
         * This request holds the parameters needed by the backend server.  After setting any optional
         * parameters, call the {@link GetNumber#execute()} method to invoke the remote operation.
         *
         * @return the request
         */
        public GetNumber getNumber() throws java.io.IOException {
            GetNumber result = new GetNumber();
            initialize(result);
            return result;
        }

        public class GetNumber extends BackendRequest<com.appspot.observador_electoral.backend.model.MessagesGetNumberOfObservacionesResponse> {

            private static final String REST_PATH = "observacion/get_number";

            /**
             * Get the total number of observaciones
             * <p/>
             * Create a request for the method "observacion.get_number".
             * <p/>
             * This request holds the parameters needed by the the backend server.  After setting any optional
             * parameters, call the {@link GetNumber#execute()} method to invoke the remote operation. <p>
             * {@link
             * GetNumber#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
             * must be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @since 1.13
             */
            protected GetNumber() {
                super(Backend.this, "GET", REST_PATH, null, com.appspot.observador_electoral.backend.model.MessagesGetNumberOfObservacionesResponse.class);
            }

            @Override
            public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
                return super.executeUsingHead();
            }

            @Override
            public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
                return super.buildHttpRequestUsingHead();
            }

            @Override
            public GetNumber setAlt(java.lang.String alt) {
                return (GetNumber) super.setAlt(alt);
            }

            @Override
            public GetNumber setFields(java.lang.String fields) {
                return (GetNumber) super.setFields(fields);
            }

            @Override
            public GetNumber setKey(java.lang.String key) {
                return (GetNumber) super.setKey(key);
            }

            @Override
            public GetNumber setOauthToken(java.lang.String oauthToken) {
                return (GetNumber) super.setOauthToken(oauthToken);
            }

            @Override
            public GetNumber setPrettyPrint(java.lang.Boolean prettyPrint) {
                return (GetNumber) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public GetNumber setQuotaUser(java.lang.String quotaUser) {
                return (GetNumber) super.setQuotaUser(quotaUser);
            }

            @Override
            public GetNumber setUserIp(java.lang.String userIp) {
                return (GetNumber) super.setUserIp(userIp);
            }

            @Override
            public GetNumber set(String parameterName, Object value) {
                return (GetNumber) super.set(parameterName, value);
            }
        }

    }

    /**
     * An accessor for creating requests from the Observador collection.
     * <p/>
     * <p>The typical use is:</p>
     * <pre>
     *   {@code Backend backend = new Backend(...);}
     *   {@code Backend.Observador.List request = backend.observador().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Observador observador() {
        return new Observador();
    }

    /**
     * The "observador" collection of methods.
     */
    public class Observador {

        /**
         * Generates a new observador in the platform, if the email is already in use returns an error
         * <p/>
         * Create a request for the method "observador.create".
         * <p/>
         * This request holds the parameters needed by the backend server.  After setting any optional
         * parameters, call the {@link Create#execute()} method to invoke the remote operation.
         *
         * @param content the {@link com.appspot.observador_electoral.backend.model.MessagesCreateObservador}
         * @return the request
         */
        public Create create(com.appspot.observador_electoral.backend.model.MessagesCreateObservador content) throws java.io.IOException {
            Create result = new Create(content);
            initialize(result);
            return result;
        }

        public class Create extends BackendRequest<com.appspot.observador_electoral.backend.model.MessagesCreateObservadorResponse> {

            private static final String REST_PATH = "observador/create";

            /**
             * Generates a new observador in the platform, if the email is already in use returns an error
             * <p/>
             * Create a request for the method "observador.create".
             * <p/>
             * This request holds the parameters needed by the the backend server.  After setting any optional
             * parameters, call the {@link Create#execute()} method to invoke the remote operation. <p> {@link
             * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param content the {@link com.appspot.observador_electoral.backend.model.MessagesCreateObservador}
             * @since 1.13
             */
            protected Create(com.appspot.observador_electoral.backend.model.MessagesCreateObservador content) {
                super(Backend.this, "POST", REST_PATH, content, com.appspot.observador_electoral.backend.model.MessagesCreateObservadorResponse.class);
            }

            @Override
            public Create setAlt(java.lang.String alt) {
                return (Create) super.setAlt(alt);
            }

            @Override
            public Create setFields(java.lang.String fields) {
                return (Create) super.setFields(fields);
            }

            @Override
            public Create setKey(java.lang.String key) {
                return (Create) super.setKey(key);
            }

            @Override
            public Create setOauthToken(java.lang.String oauthToken) {
                return (Create) super.setOauthToken(oauthToken);
            }

            @Override
            public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
                return (Create) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Create setQuotaUser(java.lang.String quotaUser) {
                return (Create) super.setQuotaUser(quotaUser);
            }

            @Override
            public Create setUserIp(java.lang.String userIp) {
                return (Create) super.setUserIp(userIp);
            }

            @Override
            public Create set(String parameterName, Object value) {
                return (Create) super.set(parameterName, value);
            }
        }

        /**
         * Gets a observador information based on it's email address
         * <p/>
         * Create a request for the method "observador.get".
         * <p/>
         * This request holds the parameters needed by the backend server.  After setting any optional
         * parameters, call the {@link Get#execute()} method to invoke the remote operation.
         *
         * @param content the {@link com.appspot.observador_electoral.backend.model.MessagesGetObservador}
         * @return the request
         */
        public Get get(com.appspot.observador_electoral.backend.model.MessagesGetObservador content) throws java.io.IOException {
            Get result = new Get(content);
            initialize(result);
            return result;
        }

        public class Get extends BackendRequest<com.appspot.observador_electoral.backend.model.MessagesGetObservadorResponse> {

            private static final String REST_PATH = "observador/get";

            /**
             * Gets a observador information based on it's email address
             * <p/>
             * Create a request for the method "observador.get".
             * <p/>
             * This request holds the parameters needed by the the backend server.  After setting any optional
             * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
             * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
             * called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param content the {@link com.appspot.observador_electoral.backend.model.MessagesGetObservador}
             * @since 1.13
             */
            protected Get(com.appspot.observador_electoral.backend.model.MessagesGetObservador content) {
                super(Backend.this, "POST", REST_PATH, content, com.appspot.observador_electoral.backend.model.MessagesGetObservadorResponse.class);
            }

            @Override
            public Get setAlt(java.lang.String alt) {
                return (Get) super.setAlt(alt);
            }

            @Override
            public Get setFields(java.lang.String fields) {
                return (Get) super.setFields(fields);
            }

            @Override
            public Get setKey(java.lang.String key) {
                return (Get) super.setKey(key);
            }

            @Override
            public Get setOauthToken(java.lang.String oauthToken) {
                return (Get) super.setOauthToken(oauthToken);
            }

            @Override
            public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
                return (Get) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Get setQuotaUser(java.lang.String quotaUser) {
                return (Get) super.setQuotaUser(quotaUser);
            }

            @Override
            public Get setUserIp(java.lang.String userIp) {
                return (Get) super.setUserIp(userIp);
            }

            @Override
            public Get set(String parameterName, Object value) {
                return (Get) super.set(parameterName, value);
            }
        }

    }

    /**
     * Builder for {@link Backend}.
     * <p/>
     * <p>
     * Implementation is not thread-safe.
     * </p>
     *
     * @since 1.3.0
     */
    public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

        /**
         * Returns an instance of a new builder.
         *
         * @param transport              HTTP transport, which should normally be:
         *                               <ul>
         *                               <li>Google App Engine:
         *                               {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
         *                               <li>Android: {@code newCompatibleTransport} from
         *                               {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
         *                               <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
         *                               </li>
         *                               </ul>
         * @param jsonFactory            JSON factory, which may be:
         *                               <ul>
         *                               <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
         *                               <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
         *                               <li>Android Honeycomb or higher:
         *                               {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
         *                               </ul>
         * @param httpRequestInitializer HTTP request initializer or {@code null} for none
         * @since 1.7
         */
        public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
                       com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
            super(
                    transport,
                    jsonFactory,
                    DEFAULT_ROOT_URL,
                    DEFAULT_SERVICE_PATH,
                    httpRequestInitializer,
                    false);
        }

        /**
         * Builds a new instance of {@link Backend}.
         */
        @Override
        public Backend build() {
            return new Backend(this);
        }

        @Override
        public Builder setRootUrl(String rootUrl) {
            return (Builder) super.setRootUrl(rootUrl);
        }

        @Override
        public Builder setServicePath(String servicePath) {
            return (Builder) super.setServicePath(servicePath);
        }

        @Override
        public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
            return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
        }

        @Override
        public Builder setApplicationName(String applicationName) {
            return (Builder) super.setApplicationName(applicationName);
        }

        @Override
        public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
            return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
        }

        @Override
        public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
            return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
        }

        @Override
        public Builder setSuppressAllChecks(boolean suppressAllChecks) {
            return (Builder) super.setSuppressAllChecks(suppressAllChecks);
        }

        /**
         * Set the {@link BackendRequestInitializer}.
         *
         * @since 1.12
         */
        public Builder setBackendRequestInitializer(
                BackendRequestInitializer backendRequestInitializer) {
            return (Builder) super.setGoogleClientRequestInitializer(backendRequestInitializer);
        }

        @Override
        public Builder setGoogleClientRequestInitializer(
                com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
            return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
        }
    }
}
